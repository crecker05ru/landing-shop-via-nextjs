@use "sass:math";
// @use "rem";
// or @use "~sass-rem" as rem;
// or @use "../node_modules/sass-rem" as rem;

//Mixins
@mixin adaptiveValue($property, $startSize, $minSize, $type){
  $addSize: $startSize - $minSize;
  @if $type== 1 {
      #{$property}: $startSize + px;
      @media(max-width: #{$maxWidthContainer + px}) {
          #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
}
}
  @else if $type== 2{
    #{$property}: $startSize + px;
    @media(min-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(#{$minSize + px } + #{$addSize} * ((100vw - 320px) / #{$maxWidth- 320}));
      }
      
    }
  @else {
    #{$property}: calc(#{minSize + px } + #{$addSize} * ((100vw - 320px) / #{$maxWidth- 320} ));
    }
}

// $html-font-size: 16px;
// @function stripUnit($value) {
//     @return $value / ($value * 0 + 1);
// }
// @function rem($pxValue) {
//     @return #{stripUnit($pxValue) / stripUnit($html-font-size)}rem;
// }



// Подключение миксинов =======
// @import "base/mixins" ;


// Подключение шрифтов ====
//&display-swap - добавить при подключении через плагин 
@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@500&display=swap');

//Подключить, если есть локальные файлы шрифтов
@import "../public/fonts/fonts.scss";

// Подключение иконочных шрифтов ===========
// Подключить если есть файл иконочного шрифта
@import "../public/fonts/icons.scss";
// Шрифт по умолчанию
$fontFamily: "Montserrat";
$fontSize: rem(18); // где 18(px) - размер шрифта по умолчанию из макета
$rootFontSize: 16;

// Основные цвета
$mainColor: #000; // Цвет шрифта по умолчанию
$mainDarkColor: #141414;

// Настройки ==========
// Минимальная ширина страницы
$minWidth: 320;
// Ширина полотна (макета)
$maxWidth: 1920;
// Ширина ограничивающего контейнера (0 - нет ограничения)
$maxWidthContainer: 1590;
// Общий отступ у контейнера
// (30 = 15px слева и справа, 0 - нет отступа)
$containerPadding: 30;

// Тип адаптива:
// 1 - отзывчивость (у контейнера нет брекпоинтов),
// 2 - по брейк-поинтам (контейнер меняет свою ширину по брейк-поинтам)
$responsiveType: 1;

// Ширина срабатывания первого брейкпоинта
$containerWidth : $maxWidthContainer + $containerPadding;



// Функции
@function rem($size) {
  @return calc($size / $rootFontSize) * 1rem;
}
// @function em($pixels, $context: $rootFontSize) {
//   @return #{$pixels/$context}em;
// }
@function em($pixels, $context: $rootFontSize) {
  @return calc($pixels/$context) * 1em;
}
// Брейкпоинты
$pc: em($containerWidth); // ПК, ноутбуки, некоторые планшеты в горизонтальном положении
$tablet: em(991.98); // Планшеты, некоторые телефоны в горизонтальном положении
$mobile: em(767.98);// Телефоны L
$mobileSmall: em(479.98); // Телефоны S

// Обнуление и общие параметры ===========
@import "./null.scss";

body {
  font-weight: 500;
  font-family: $fontFamily;
  // Скролл заблокирован
  .lock & {
    overflow: hidden;
    touch-action: none;
  }
}
.wrapper {
  min-height: 100%;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  // Сайт загружен
  .loaded & {
  }
  // Прижимаем footer
  > main {
    flex: 1 1 auto;
  }
  // Фикс для слайдеров
  > * {
    min-width: 0;
  }
}

// Ограничивающий контейнер ===========

/*
(i) Стили будут применяться ко 
всем классам содержащим *__container
Например header__container, main__container и т.д.
Снипет (HTML): cnt
*/
@if ($responsiveType==1){
  // Отзывчивый 
  [class*="__container"] {
    @if ($maxWidthContainer>0){
      max-width: rem($maxWidthContainer);
      box-sizing: content-box;
      margin: 0 auto;
    }
    @if ($containerPadding>0) {
      padding: 0 rem(math.div($containerPadding, 2));
    }
  }
} @else {
  // По брейк-поинтам
  [class*="__container"]{
    margin: 0 auto;
    @if ($maxWidthContainer>0){
      max-width:  rem($maxWidthContainer);
      box-sizing: content-box;
    } @else {
      @if ($containerPadding>0) {
        padding:  0 rem(math.div($containerPadding, 2));
      }
    }
    @media (max-width: $pc) {
      min-width: rem(970);
    }
    @media (max-width: $tablet) {
      max-width:  rem(750);
    }
    @media (max-width: $mobile) {
      max-width: none;
      @if ($containerPadding>0 and $maxWidthContainer>0){
        padding: 0 rem(math.div($containerPadding, 2));
      }
    }
  }
}
// Подключение базовых стилей, шаблонов (заголовков) и вспомогательных классов
// Для подключения.отключения конкретных стилей смотри base.css
// @import "base";

// Подключение стилей общих элементов проекта
// @import "common";
// Подключение стилей отдельных блоков
@import "header";
//@import "footer";

//Подключение стилей отдельных страниц 
//@import "home";
a {
  color: inherit;
  text-decoration: none;
}

* {
  box-sizing: border-box;
}
.black{
  background-color: #000;
}